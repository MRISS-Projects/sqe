/* Copyright 2005,2006 Sven Reimers, Florian Vogler
 *
 * This file is part of the Software Quality Environment Project.
 *
 * The Software Quality Environment Project is free software:
 * you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation,
 * either version 2 of the License, or (at your option) any later version.
 *
 * The Software Quality Environment Project is distributed in the hope that
 * it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.nbheaven.sqe.core.controlcenter.ui.panels;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.nbheaven.sqe.core.api.SQEManager;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;

/**
 *
 * @author Sven Reimers
 */
public class ProjectStatistics extends javax.swing.JPanel implements PropertyChangeListener {
    
    private Project activeProject;
    
    /** Creates new form ProjectStatistics */
    public ProjectStatistics() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        noSourceFilesLabel = new javax.swing.JLabel();
        classpathLabel = new javax.swing.JLabel();
        classPathScrollPane = new javax.swing.JScrollPane();
        classPathList = new javax.swing.JList<String>();
        name = new javax.swing.JLabel();
        sourceFiles = new javax.swing.JLabel();

        setBackground(java.awt.SystemColor.window);

        nameLabel.setText(org.openide.util.NbBundle.getMessage(ProjectStatistics.class, "ProjectStatistics.nameLabel.text")); // NOI18N

        noSourceFilesLabel.setText(org.openide.util.NbBundle.getMessage(ProjectStatistics.class, "ProjectStatistics.noSourceFilesLabel.text")); // NOI18N

        classpathLabel.setText(org.openide.util.NbBundle.getMessage(ProjectStatistics.class, "ProjectStatistics.classpathLabel.text")); // NOI18N

        classPathList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            @Override
            public int getSize() { return strings.length; }
            @Override
            public String getElementAt(int i) { return strings[i]; }
        });
        classPathScrollPane.setViewportView(classPathList);

        name.setText(org.openide.util.NbBundle.getMessage(ProjectStatistics.class, "ProjectStatistics.name.text")); // NOI18N

        sourceFiles.setText(org.openide.util.NbBundle.getMessage(ProjectStatistics.class, "ProjectStatistics.sourceFiles.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classpathLabel)
                    .addComponent(nameLabel)
                    .addComponent(noSourceFilesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classPathScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(sourceFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(90, 90, 90)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(name))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noSourceFilesLabel)
                    .addComponent(sourceFiles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classpathLabel)
                    .addComponent(classPathScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        activeProject = (Project) evt.getNewValue();
        updateData();
    }

    private void updateData() {
        if (null != activeProject) {
            name.setText(ProjectUtils.getInformation(activeProject).getDisplayName());        
        }
        else {
            name.setText("<No project selected>");
        }
    }
    
    @Override
    public void addNotify() {
        super.addNotify();
        activeProject = SQEManager.getDefault().getActiveProject();
        SQEManager.getDefault().addPropertyChangeListener(SQEManager.PROP_ACTIVE_PROJECT, this);
        updateData();
    }

    @Override
    public void removeNotify() {
        SQEManager.getDefault().removePropertyChangeListener(SQEManager.PROP_ACTIVE_PROJECT, this);
        super.removeNotify();
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> classPathList;
    private javax.swing.JScrollPane classPathScrollPane;
    private javax.swing.JLabel classpathLabel;
    private javax.swing.JLabel name;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel noSourceFilesLabel;
    private javax.swing.JLabel sourceFiles;
    // End of variables declaration//GEN-END:variables
    
}
