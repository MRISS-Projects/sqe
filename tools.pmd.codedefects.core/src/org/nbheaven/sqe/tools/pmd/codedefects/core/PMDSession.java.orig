/*   Copyright 2005,2006 Sven Reimers, Florian Vogler
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package org.nbheaven.sqe.tools.pmd.codedefects.core;

import org.nbheaven.sqe.codedefects.core.spi.AbstractQualitySession;

import org.netbeans.api.project.Project;

import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.nbheaven.sqe.codedefects.core.spi.SQECodedefectScanner;

/**
 *
 * @author Sven Reimers
 */
public class PMDSession extends AbstractQualitySession {

    private PMDResult pmdResult;
    private AtomicBoolean isRunning;

    /**
     * Creates a new instance of PMDSession
     */
    public PMDSession(PMDQualityProvider provider, Project project) {
        super(provider, project);
        isRunning = new AtomicBoolean(false);
    }

    @Override
    public PMDQualityProvider getProvider() {
        return (PMDQualityProvider) super.getProvider();
    }

    public PMDResult getResult() {
        return pmdResult;
    }

    private Lock waitResultLock = new ReentrantLock();
    private Condition waitForResult = waitResultLock.newCondition();

    public PMDResult computeResultAndWait(FileObject... fileObjects) {
        PMDScannerJob job = new PMDFileScannerJob(getProject(), fileObjects);
        SQECodedefectScanner.postAndWait(job);
        return job.getCheckstyleResult();
    }

    public PMDResult computeResultAndWait() {
        waitResultLock.lock();
        computeResult();
        waitForResult.awaitUninterruptibly();
        waitResultLock.unlock();
        return this.pmdResult;
    }

    public void computeResult() {
        if (!isRunning.getAndSet(true)) {
            PMDScannerJob job = new PMDScannerJob(this);
            SQECodedefectScanner.post(job);
        } else {
//            System.out.println("Skip PMD...");
        }
    }

    void scanningDone() {
        waitResultLock.lock();
        isRunning.set(false);
        waitForResult.signalAll();
        waitResultLock.unlock();
    }

    void setResult(PMDResult pmdResult) {
        PMDResult oldResult = this.pmdResult;
        this.pmdResult = pmdResult;
        fireResultChanged(oldResult, this.pmdResult);
    }

    void resultChanged(PMDResult oldResult, PMDResult newResult) {
        fireResultChanged(oldResult, newResult);
    }
}