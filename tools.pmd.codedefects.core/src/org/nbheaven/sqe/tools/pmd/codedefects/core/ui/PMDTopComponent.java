/* Copyright 2005,2006 Sven Reimers, Florian Vogler
 *
 * This file is part of the Software Quality Environment Project.
 *
 * The Software Quality Environment Project is free software:
 * you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation,
 * either version 2 of the License, or (at your option) any later version.
 *
 * The Software Quality Environment Project is distributed in the hope that
 * it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.nbheaven.sqe.tools.pmd.codedefects.core.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Properties;
import javax.swing.JComponent;
import javax.swing.JLabel;
import org.nbheaven.sqe.codedefects.core.util.SQECodedefectSupport;
import org.nbheaven.sqe.tools.pmd.codedefects.core.PMDSession;
import org.nbheaven.sqe.tools.pmd.codedefects.core.ui.result.ResultPanel;
import org.nbheaven.sqe.core.api.SQEManager;
import org.netbeans.api.project.Project;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

@ConvertAsProperties(
        dtd = "-//org.nbheaven.sqe.tools.pmd.codedefects.core.ui//PMDTopComponent//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = PMDTopComponent.PREFERRED_ID,
        iconBase = "org/nbheaven/sqe/tools/pmd/codedefects/core/resources/pmd.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", position = 3214, openAtStartup = false)
@ActionID(category = "Window", id = "org.nbheaven.sqe.tools.pmd.codedefects.core.ui.PMDTopComponent")
@ActionReference(path = "Menu/Window/Quality", position = 300)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PMDAction",
        preferredID = PMDTopComponent.PREFERRED_ID)
@Messages({
    "CTL_PMDAction=PMD",
    "CTL_PMDTopComponent=PMD",
    "HINT_PMDTopComponent=This is the SQE PMD window."
})
public final class PMDTopComponent extends TopComponent {

    static final String PREFERRED_ID = "PMDTopComponent";

    private final SQEManagerListener sqeManagerListener;
    private final JComponent emptyComponent;
    private PMDSession activeSession = null;

    private PMDTopComponent() {
        sqeManagerListener = new SQEManagerListener(this);
        initComponents();

        emptyComponent = new JLabel("<No Results available>");
        emptyComponent.setBackground(Color.WHITE);

        setName(Bundle.CTL_PMDTopComponent());
        setToolTipText(Bundle.HINT_PMDTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resultPanel = new javax.swing.JPanel();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            @Override
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            @Override
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            @Override
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        setLayout(new java.awt.BorderLayout());

        resultPanel.setLayout(new java.awt.BorderLayout());
        add(resultPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_formAncestorAdded

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel resultPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Obtain the PMDTopComponent instance.
     */
    public static synchronized PMDTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        return win instanceof PMDTopComponent ? (PMDTopComponent) win : new PMDTopComponent();
    }

    @Override
    public void componentOpened() {
        SQEManager.getDefault().addPropertyChangeListener(SQEManager.PROP_ACTIVE_PROJECT, sqeManagerListener);
        setActiveSessionByProject(SQEManager.getDefault().getActiveProject());
    }

    @Override
    public void componentClosed() {
        SQEManager.getDefault().removePropertyChangeListener(SQEManager.PROP_ACTIVE_PROJECT, sqeManagerListener);
        setActiveSession(null);
    }

    void writeProperties(Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(Properties p) {
        // String version = p.getProperty("version");
    }

    private void setActiveSessionByProject(final Project project) {
        if (!EventQueue.isDispatchThread()) {
            EventQueue.invokeLater(() -> setActiveSessionByProject(project));
            return;
        }

        if (null != project) {
            setActiveSession(SQECodedefectSupport.retrieveSession(project, PMDSession.class));
            AbstractNode node = new AbstractNode(Children.LEAF, Lookups.singleton(project));
            setActivatedNodes(new Node[]{node});
        } else {
            setActiveSession(null);
            setActivatedNodes(new Node[0]);
        }
    }

    private void setActiveSession(final PMDSession session) {
        assert EventQueue.isDispatchThread() : "setActiveSession has to be called on EventQueue";
        if (activeSession != session) {
            this.activeSession = session;

            JComponent component;
            if (null != activeSession) {
                component = new ResultPanel(activeSession);
            } else {
                component = emptyComponent;
            }

            resultPanel.removeAll();
            resultPanel.add(component, BorderLayout.CENTER);
            resultPanel.invalidate();
            revalidate();
            repaint();
        }
    }

    private static class SQEManagerListener implements PropertyChangeListener {

        private final PMDTopComponent component;

        private SQEManagerListener(PMDTopComponent component) {
            this.component = component;
        }

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if (SQEManager.PROP_ACTIVE_PROJECT.equals(evt.getPropertyName())) {
                component.setActiveSessionByProject((Project) evt.getNewValue());
            }
        }
    }

}
